{"file_contents":{"ReturnPoint/FormInput.cs":{"content":"using System;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\n\nnamespace ReturnPoint\n{\n    public class FormInput : Form\n    {\n        private TextBox locationTextBox;\n        private DateTimePicker datePicker;\n        private Button saveButton;\n        private string photoPath;\n        private string saveFolder;\n\n        public FormInput(string photoFilePath, string folderPath)\n        {\n            this.Text = \"Item Information\";\n            this.Size = new Size(400, 300);\n            this.StartPosition = FormStartPosition.CenterParent;\n            this.FormBorderStyle = FormBorderStyle.FixedDialog;\n\n            photoPath = photoFilePath;\n            saveFolder = folderPath;\n\n            Label locationLabel = new Label\n            {\n                Text = \"Where was the item last found?\",\n                Location = new Point(20, 20),\n                AutoSize = true,\n                Font = new Font(\"Arial\", 12, FontStyle.Bold)\n            };\n            locationTextBox = new TextBox\n            {\n                Location = new Point(20, 50),\n                Width = 340,\n                Font = new Font(\"Arial\", 12)\n            };\n\n            Label dateLabel = new Label\n            {\n                Text = \"When was the item last found?\",\n                Location = new Point(20, 90),\n                AutoSize = true,\n                Font = new Font(\"Arial\", 12, FontStyle.Bold)\n            };\n            datePicker = new DateTimePicker\n            {\n                Location = new Point(20, 120),\n                Width = 200,\n                Font = new Font(\"Arial\", 12),\n                Format = DateTimePickerFormat.Custom,\n                CustomFormat = \"yyyy-MM-dd HH:mm\"\n            };\n\n            saveButton = new Button\n            {\n                Text = \"Save\",\n                Location = new Point(20, 180),\n                Width = 100,\n                Height = 40,\n                BackColor = Color.SeaGreen,\n                ForeColor = Color.White,\n                Font = new Font(\"Arial\", 12, FontStyle.Bold)\n            };\n            saveButton.Click += SaveButton_Click;\n\n            this.Controls.Add(locationLabel);\n            this.Controls.Add(locationTextBox);\n            this.Controls.Add(dateLabel);\n            this.Controls.Add(datePicker);\n            this.Controls.Add(saveButton);\n        }\n\n        private void SaveButton_Click(object? sender, EventArgs e)\n        {\n            string location = locationTextBox.Text.Trim();\n            string dateFound = datePicker.Value.ToString(\"yyyy-MM-dd HH:mm\");\n\n            if (string.IsNullOrEmpty(location))\n            {\n                MessageBox.Show(\"Please enter the location where the item was found.\", \"Warning\", MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                return;\n            }\n\n            string infoFileName = Path.GetFileNameWithoutExtension(photoPath) + \"_info.txt\";\n            string infoFilePath = Path.Combine(saveFolder, infoFileName);\n\n            try\n            {\n                File.WriteAllText(infoFilePath, $\"Photo: {Path.GetFileName(photoPath)}\\r\\nLocation: {location}\\r\\nDate Found: {dateFound}\");\n                MessageBox.Show(\"Item information saved successfully!\", \"Saved\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                this.Close();\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"Error saving item information: {ex.Message}\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }\n    }\n}\n","size_bytes":3553},"ReturnPoint/obj/Release/net6.0-windows/ReturnPoint.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.Drawing;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\nglobal using global::System.Windows.Forms;\n","size_bytes":367},"ReturnPoint/obj/Debug/net6.0-windows/ReturnPoint.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"ReturnPoint\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"ReturnPoint\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"ReturnPoint\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Runtime.Versioning.TargetPlatformAttribute(\"Windows7.0\")]\n[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute(\"Windows7.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1101},"styles.css":{"content":"body {\n    font-family: Arial, sans-serif;\n    background-color: #252525;\n    margin: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n\n.login-container {\n    background-color: rgb(184, 184, 184);\n    padding: 2.5rem;      \n    border-radius: 8px;\n    box-shadow: 0 10px 20px rgba(255, 255, 255, 0.1);\n    width: 400px;   \n    border-radius: 60px;     \n}\n\nh2 {\n    text-align: center;\n    color: #333;\n}\n\n.form-group {\n    margin-bottom: 1rem;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 0.5rem;\n    color: #555;\n}\n\ninput {\n    width: 100%;\n    padding: 0.5rem;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\ninput[type=\"email\"] {\n    width: 100%;\n    padding: 0.5rem;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\nbutton {\n    width: 100%;\n    padding: 0.75rem;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n    border-radius: 20px;\n}\n\n.register-btn {\n    background-color: #2196F3;\n}\n\n.register-btn:hover {\n    background-color: #1976D2;\n}\n\nbutton:hover {\n    background-color: #45a049;\n}\n\n.back-to-login {\n    background-color: #2196F3;\n}\n\n.back-to-login:hover {\n    background-color: #1976D2;\n}\n\n.error-message {\n    color: red;\n    font-size: 0.9rem;\n    margin-top: 1rem;\n    text-align: center;\n}","size_bytes":1423},"register.js":{"content":"document.addEventListener('DOMContentLoaded', () => {\n    const registerForm = document.getElementById('registerForm');\n    const errorMessage = document.getElementById('errorMessage');\n\n    registerForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const username = document.getElementById('username').value;\n        const email = document.getElementById('email').value;\n        const password = document.getElementById('password').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n\n        if (password !== confirmPassword) {\n            errorMessage.textContent = 'Passwords do not match';\n            return;\n        }\n\n        const response = await fetch('/api/register', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ username, email, password })\n        });\n\n        const data = await response.json();\n        if (response.ok) {\n            alert('Registration successful! Please login.');\n            window.location.href = 'index.html';\n        } else {\n            errorMessage.textContent = data.message || 'Registration failed';\n        }\n    });\n});","size_bytes":1214},"ReturnPoint/FormClaimantInfo.cs":{"content":"using System;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\n\nnamespace ReturnPoint\n{\n    public class FormClaimantInfo : Form\n    {\n        public FormClaimantInfo(string infoFilePath, string photoFilePath)\n        {\n            this.Text = \"Claimant Information\";\n            this.StartPosition = FormStartPosition.CenterParent;\n            this.Size = new Size(400, 500);\n\n            // Claimant photo\n            PictureBox claimantPic = new PictureBox\n            {\n                Size = new Size(350, 350),\n                Top = 10,\n                Left = 20,\n                SizeMode = PictureBoxSizeMode.Zoom,\n                Image = File.Exists(photoFilePath) ? Image.FromFile(photoFilePath) : null\n            };\n\n            // Claimant info text\n            TextBox infoBox = new TextBox\n            {\n                Multiline = true,\n                ReadOnly = true,\n                Top = 370,\n                Left = 20,\n                Width = 350,\n                Height = 100,\n                ScrollBars = ScrollBars.Vertical,\n                Text = File.Exists(infoFilePath) ? File.ReadAllText(infoFilePath) : \"No info available\"\n            };\n\n            this.Controls.Add(claimantPic);\n            this.Controls.Add(infoBox);\n        }\n    }\n}\n","size_bytes":1288},"ReturnPoint/FormGallery.cs":{"content":"using System;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\n\nnamespace ReturnPoint\n{\n    public class FormGallery : Form\n    {\n        private Panel outerPanel;\n        private FlowLayoutPanel galleryPanel;\n        private Button openCameraButton;\n        private string saveFolder;\n\n        public FormGallery()\n        {\n            this.Text = \"Gallery\";\n            this.WindowState = FormWindowState.Maximized;\n            this.BackColor = Color.SeaGreen; // 🌿 Main background green\n\n            saveFolder = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"CapturedImages\");\n            if (!Directory.Exists(saveFolder))\n                Directory.CreateDirectory(saveFolder);\n\n            // Outer panel (scroll area)\n            outerPanel = new Panel\n            {\n                Dock = DockStyle.Fill,\n                AutoScroll = true,\n                BackColor = Color.SeaGreen // same as form background\n            };\n\n            // Inner panel (center gallery)\n            galleryPanel = new FlowLayoutPanel\n            {\n                AutoSize = true,\n                AutoSizeMode = AutoSizeMode.GrowAndShrink,\n                FlowDirection = FlowDirection.TopDown,\n                WrapContents = false,\n                BackColor = Color.SeaGreen\n            };\n\n            outerPanel.Controls.Add(galleryPanel);\n            outerPanel.Resize += (s, e) =>\n            {\n                galleryPanel.Left = (outerPanel.ClientSize.Width - galleryPanel.Width) / 2;\n            };\n\n            // Floating \"+\" button\n            openCameraButton = new Button\n            {\n                Text = \"+\",\n                Width = 60,\n                Height = 60,\n                BackColor = Color.Aqua, // ✅ aqua by default\n                ForeColor = Color.White,\n                Font = new Font(\"Arial\", 18, FontStyle.Bold),\n                FlatStyle = FlatStyle.Flat\n            };\n            openCameraButton.FlatAppearance.BorderSize = 0;\n\n            // hover effect → lighter aqua\n            openCameraButton.MouseEnter += (s, e) =>\n            {\n                openCameraButton.BackColor = Color.MediumAquamarine;\n            };\n            openCameraButton.MouseLeave += (s, e) =>\n            {\n                openCameraButton.BackColor = Color.Aqua;\n            };\n\n            openCameraButton.Click += OpenCameraButton_Click;\n\n            this.Controls.Add(outerPanel);\n            this.Controls.Add(openCameraButton);\n\n            openCameraButton.BringToFront();\n            openCameraButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;\n            openCameraButton.Location = new Point(this.ClientSize.Width - 80, this.ClientSize.Height - 80);\n\n            this.Resize += (s, e) =>\n            {\n                openCameraButton.Location = new Point(this.ClientSize.Width - 80, this.ClientSize.Height - 80);\n                outerPanel.PerformLayout();\n            };\n\n            LoadSavedImages();\n        }\n\n        private void OpenCameraButton_Click(object sender, EventArgs e)\n        {\n            FormCamera camForm = new FormCamera(saveFolder);\n            camForm.PhotoSaved += (filePath) =>\n            {\n                AddImageToGallery(filePath, false);\n            };\n            camForm.ShowDialog();\n        }\n\n        private void LoadSavedImages()\n        {\n            galleryPanel.Controls.Clear();\n\n            string[] files = Directory.GetFiles(saveFolder, \"*.jpg\");\n\n            foreach (string file in files)\n            {\n                bool claimed = File.Exists(Path.Combine(Path.GetDirectoryName(file),\n                    Path.GetFileNameWithoutExtension(file) + \"_claim.txt\"));\n\n                AddImageToGallery(file, claimed);\n            }\n        }\n\n        private void AddImageToGallery(string filePath, bool alreadyClaimed = false)\n        {\n            if (!File.Exists(filePath)) return;\n\n            Image img = Image.FromFile(filePath);\n\n            int displayWidth = 320;\n            int displayHeight = (int)((double)img.Height / img.Width * displayWidth);\n\n            Panel card = new Panel\n            {\n                Width = displayWidth + 20,\n                Height = displayHeight + 60,\n                BackColor = this.BackColor,\n                Margin = new Padding(10),\n                Padding = new Padding(0),\n                BorderStyle = BorderStyle.None\n            };\n\n            PictureBox pic = new PictureBox\n            {\n                Image = img,\n                SizeMode = PictureBoxSizeMode.Zoom,\n                Width = displayWidth,\n                Height = displayHeight,\n                Cursor = Cursors.Hand\n            };\n\n            // Extract the info-display logic\n            void ShowItemInfo()\n            {\n                string infoPath = Path.Combine(Path.GetDirectoryName(filePath),\n                    Path.GetFileNameWithoutExtension(filePath) + \"_info.txt\");\n\n                if (File.Exists(infoPath))\n                {\n                    string[] lines = File.ReadAllLines(infoPath);\n\n                    Form infoForm = new Form\n                    {\n                        Text = \"Item Information\",\n                        StartPosition = FormStartPosition.CenterParent,\n                        Size = new Size(400, 250)\n                    };\n\n                    Label locationLabel = new Label\n                    {\n                        Text = lines.Length > 1 ? lines[1] : \"Location: N/A\",\n                        Top = 20,\n                        Left = 20,\n                        AutoSize = true,\n                        Font = new Font(\"Arial\", 12, FontStyle.Bold)\n                    };\n\n                    Label dateLabel = new Label\n                    {\n                        Text = lines.Length > 2 ? lines[2] : \"Date Found: N/A\",\n                        Top = 60,\n                        Left = 20,\n                        AutoSize = true,\n                        Font = new Font(\"Arial\", 12, FontStyle.Bold)\n                    };\n\n                    infoForm.Controls.Add(locationLabel);\n                    infoForm.Controls.Add(dateLabel);\n                    infoForm.ShowDialog();\n                }\n                else\n                {\n                    MessageBox.Show(\"No information available for this item.\", \"Info\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n            }\n\n            void ShowClaimantInfo()\n            {\n                string folder = Path.GetDirectoryName(filePath);\n                string infoPath = Path.Combine(folder, Path.GetFileNameWithoutExtension(filePath) + \"_claim.txt\");\n\n                if (File.Exists(infoPath))\n                {\n                    string[] lines = File.ReadAllLines(infoPath);\n\n                    Form claimForm = new Form\n                    {\n                        Text = \"Claimant Information\",\n                        StartPosition = FormStartPosition.CenterParent,\n                        Size = new Size(700, 500) // bigger to fit photo\n                    };\n\n                    // --- Text Labels ---\n                    Label lblName = new Label\n                    {\n                        Text = lines.Length > 0 ? lines[0] : \"Name: N/A\",\n                        Top = 20,\n                        Left = 20,\n                        AutoSize = true,\n                        Font = new Font(\"Arial\", 12, FontStyle.Bold)\n                    };\n\n                    Label lblContact = new Label\n                    {\n                        Text = lines.Length > 1 ? lines[1] : \"Contact: N/A\",\n                        Top = 60,\n                        Left = 20,\n                        AutoSize = true,\n                        Font = new Font(\"Arial\", 12, FontStyle.Bold)\n                    };\n\n                    Label lblRole = new Label\n                    {\n                        Text = lines.Length > 2 ? lines[2] : \"Role: N/A\",\n                        Top = 100,\n                        Left = 20,\n                        AutoSize = true,\n                        Font = new Font(\"Arial\", 12, FontStyle.Bold)\n                    };\n\n                    Label lblGradeSection = new Label\n                    {\n                        Text = lines.Length > 3 ? lines[3] : \"Grade/Section: N/A\",\n                        Top = 140,\n                        Left = 20,\n                        AutoSize = true,\n                        Font = new Font(\"Arial\", 12, FontStyle.Bold)\n                    };\n\n                    Label lblWhen = new Label\n                    {\n                        Text = lines.Length > 4 ? lines[4] : \"When Found: N/A\",\n                        Top = 180,\n                        Left = 20,\n                        AutoSize = true,\n                        Font = new Font(\"Arial\", 12, FontStyle.Bold)\n                    };\n\n                    // --- Claimant Photo ---\n                    PictureBox picClaimant = new PictureBox\n                    {\n                        Top = 20,\n                        Left = 350,\n                        Width = 300,\n                        Height = 300,\n                        SizeMode = PictureBoxSizeMode.Zoom,\n                        BorderStyle = BorderStyle.FixedSingle\n                    };\n\n                    // look in .../Claimant subfolder\n                    string claimantFolder = Path.Combine(folder, \"Claimants\");\n                    if (Directory.Exists(claimantFolder))\n                    {\n                        string[] claimantPhotos = Directory.GetFiles(claimantFolder, \"claimant_*.jp*\"); // handles .jpg/.jpeg\n\n                        if (claimantPhotos.Length > 0)\n                        {\n                            try\n                            {\n                                string latestPhoto = claimantPhotos.Last();\n\n                                // load into memory (avoids file locking)\n                                using (FileStream fs = new FileStream(latestPhoto, FileMode.Open, FileAccess.Read))\n                                using (MemoryStream ms = new MemoryStream())\n                                {\n                                    fs.CopyTo(ms);\n                                    picClaimant.Image = Image.FromStream(ms);\n                                }\n                            }\n                            catch (Exception ex)\n                            {\n                                MessageBox.Show($\"Could not load claimant photo: {ex.Message}\", \n                                    \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                            }\n                        }\n                    }\n\n                    // Add controls\n                    claimForm.Controls.Add(lblName);\n                    claimForm.Controls.Add(lblContact);\n                    claimForm.Controls.Add(lblRole);\n                    claimForm.Controls.Add(lblGradeSection);\n                    claimForm.Controls.Add(lblWhen);\n                    claimForm.Controls.Add(picClaimant);\n\n                    claimForm.ShowDialog();\n                }\n                else\n                {\n                    MessageBox.Show(\"No information available for this item.\", \"Info\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n            }\n\n\n            pic.Click += (s, e) => ShowClaimantInfo();\n\n            Button claimBtn = new Button\n            {\n                Text = alreadyClaimed ? \"Claimed\" : \"Claim\",\n                Top = displayHeight + 5,\n                Width = displayWidth / 2 - 5,\n                Height = 40,\n                BackColor = Color.Aqua,\n                ForeColor = Color.White,\n                Enabled = !alreadyClaimed\n            };\n\n            Button infoBtn = new Button\n            {\n                Text = \"Info\",\n                Top = displayHeight + 5,\n                Left = displayWidth / 2 + 5,\n                Width = displayWidth / 2 - 5,\n                Height = 40,\n                BackColor = Color.LightGray,\n                ForeColor = Color.Black\n            };\n\n            infoBtn.Click += (s, e) => ShowItemInfo();\n\n            claimBtn.Click += (s, e) =>\n            {\n                if (!alreadyClaimed)\n                {\n                    using (ClaimantInfoForm infoForm = new ClaimantInfoForm())\n                    {\n                        if (infoForm.ShowDialog() == DialogResult.OK)\n                        {\n                            string claimInfoPath = Path.Combine(Path.GetDirectoryName(filePath),\n                                Path.GetFileNameWithoutExtension(filePath) + \"_claim.txt\");\n\n                            File.WriteAllText(claimInfoPath,\n                                $\"Name: {infoForm.ClaimantName}\\nContact: {infoForm.Contact}\\n\" +\n                                $\"Role: {infoForm.Role}\\nGrade/Section: {infoForm.GradeSection}\\nWhen Found: {infoForm.WhenFound}\");\n\n                            // Open claim camera and save claimant photo in same folder\n                            FormClaimCamera claimCam = new FormClaimCamera(Path.GetDirectoryName(filePath));\n                            claimCam.FaceCaptured += (photoPath) =>\n                            {\n                                claimBtn.Text = \"Claimed\";\n                                claimBtn.Enabled = false;\n\n                                MessageBox.Show($\"Claimant photo saved as:\\n{photoPath}\", \n                                    \"Photo Saved\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                            };\n                            claimCam.ShowDialog();\n                        }\n                    }\n                }\n                else\n                {\n                    MessageBox.Show(\"This item has already been claimed.\", \"Info\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n            };\n\n\n            card.Controls.Add(pic);\n            card.Controls.Add(claimBtn);\n            card.Controls.Add(infoBtn);\n            galleryPanel.Controls.Add(card);\n\n            galleryPanel.Left = (outerPanel.ClientSize.Width - galleryPanel.Width) / 2;\n        }\n\n\n\n    }\n}\n","size_bytes":14172},"app.py":{"content":"from flask import Flask, request, jsonify, send_from_directory\nimport os\nimport json\n\napp = Flask(__name__, static_folder='.', static_url_path='')\n\nUSERS_FILE = 'users.json'\n\ndef load_users():\n    if not os.path.exists(USERS_FILE):\n        return []\n    with open(USERS_FILE, 'r') as f:\n        return json.load(f)\n\ndef save_users(users):\n    with open(USERS_FILE, 'w') as f:\n        json.dump(users, f)\n\n@app.route('/')\ndef index():\n    return send_from_directory('.', 'index.html')\n\n@app.route('/register.html')\ndef register_page():\n    return send_from_directory('.', 'register.html')\n\n@app.route('/api/register', methods=['POST'])\ndef register():\n    data = request.json\n    users = load_users()\n    if any(u['username'] == data['username'] for u in users):\n        return jsonify({'message': 'Username already exists'}), 400\n    users.append({\n        'username': data['username'],\n        'email': data['email'],\n        'password': data['password']\n    })\n    save_users(users)\n    return jsonify({'message': 'Registration successful'})\n\n@app.route('/api/login', methods=['POST'])\ndef login():\n    data = request.json\n    users = load_users()\n    user = next((u for u in users if u['username'] == data['username'] and u['password'] == data['password']), None)\n    if user:\n        return jsonify({'message': 'Login successful'})\n    return jsonify({'message': 'Invalid username or password'}), 401\n\nif __name__ == '__main__':\n    app.run(debug=True)","size_bytes":1456},"ReturnPoint/FormClaimCamera.cs":{"content":"using System;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\nusing AForge.Video;\nusing AForge.Video.DirectShow;\n\nnamespace ReturnPoint\n{\n    public class FormClaimCamera : Form\n    {\n        private PictureBox livePreview;\n        private Label countdownLabel;\n        private Label blinkLabel;\n        private VideoCaptureDevice videoSource;\n        private FilterInfoCollection videoDevices;\n        private Bitmap lastFrame;\n        private string saveFolder;\n        private System.Windows.Forms.Timer countdownTimer;\n        private System.Windows.Forms.Timer blinkTimer;\n        private int countdownValue;\n\n        public delegate void PhotoCapturedHandler(string filePath);\n        public event PhotoCapturedHandler FaceCaptured;\n\n        public FormClaimCamera(string baseFolder)\n        {\n            this.Text = \"Capture Photo\";\n            this.StartPosition = FormStartPosition.CenterParent;\n            this.Size = new Size(800, 800);\n            this.FormBorderStyle = FormBorderStyle.FixedDialog;\n\n            saveFolder = Path.Combine(baseFolder, \"Claimants\");\n            if (!Directory.Exists(saveFolder))\n                Directory.CreateDirectory(saveFolder);\n\n            livePreview = new PictureBox\n            {\n                Dock = DockStyle.Fill,\n                SizeMode = PictureBoxSizeMode.Zoom\n            };\n\n            countdownLabel = new Label\n            {\n                AutoSize = false,\n                Dock = DockStyle.Top,\n                Height = 60,\n                TextAlign = ContentAlignment.MiddleCenter,\n                Font = new Font(\"Arial\", 28, FontStyle.Bold),\n                ForeColor = Color.Red\n            };\n\n            // Blinking \"PLEASE STAY STILL\" label\n            blinkLabel = new Label\n            {\n                Text = \"PLEASE STAY STILL\",\n                AutoSize = false,\n                Height = 40,\n                Dock = DockStyle.Top,\n                TextAlign = ContentAlignment.MiddleCenter,\n                Font = new Font(\"Arial\", 20, FontStyle.Bold),\n                ForeColor = Color.White,\n                BackColor = Color.Transparent\n            };\n\n            this.Controls.Add(livePreview);\n            this.Controls.Add(countdownLabel);\n            this.Controls.Add(blinkLabel);\n\n            this.Load += FormClaimCamera_Load;\n            this.FormClosing += FormClaimCamera_FormClosing;\n        }\n\n        private void FormClaimCamera_Load(object sender, EventArgs e)\n        {\n            videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);\n            if (videoDevices.Count == 0)\n            {\n                MessageBox.Show(\"No camera found!\");\n                this.Close();\n                return;\n            }\n\n            videoSource = new VideoCaptureDevice(videoDevices[0].MonikerString);\n            videoSource.NewFrame += Video_NewFrame;\n            videoSource.Start();\n\n            // Start countdown (5 seconds)\n            countdownValue = 4;\n            countdownLabel.Text = countdownValue.ToString();\n\n            countdownTimer = new System.Windows.Forms.Timer();\n            countdownTimer.Interval = 1000;\n            countdownTimer.Tick += CountdownTimer_Tick;\n            countdownTimer.Start();\n\n            // Blinking label timer\n            blinkTimer = new System.Windows.Forms.Timer();\n            blinkTimer.Interval = 2000; // blink every 0.5 sec\n            blinkTimer.Tick += (s, ev) =>\n            {\n                blinkLabel.Visible = !blinkLabel.Visible;\n            };\n            blinkTimer.Start();\n        }\n\n        private void CountdownTimer_Tick(object sender, EventArgs e)\n        {\n            countdownValue--;\n            if (countdownValue > 0)\n            {\n                countdownLabel.Text = countdownValue.ToString();\n            }\n            else\n            {\n                countdownTimer.Stop();\n                blinkTimer.Stop();\n                blinkLabel.Visible = true;\n                countdownLabel.Text = \"\";\n\n                // Freeze camera feed\n                if (videoSource != null && videoSource.IsRunning)\n                    videoSource.NewFrame -= Video_NewFrame;\n\n                CapturePhoto();\n            }\n        }\n\n        private void Video_NewFrame(object sender, NewFrameEventArgs eventArgs)\n        {\n            Bitmap frame = (Bitmap)eventArgs.Frame.Clone();\n            frame.RotateFlip(RotateFlipType.RotateNoneFlipX);\n\n            lastFrame?.Dispose();\n            lastFrame = (Bitmap)frame.Clone();\n\n            livePreview.Image?.Dispose();\n            livePreview.Image = frame;\n        }\n\n        private void CapturePhoto()\n        {\n            if (lastFrame == null) return;\n\n            Bitmap capturedFrame = (Bitmap)lastFrame.Clone();\n\n            string fileName = $\"claimant_{DateTime.Now:yyyyMMdd_HHmmss}.jpg\";\n            string filePath = Path.Combine(saveFolder, fileName);\n\n            capturedFrame.Save(filePath, System.Drawing.Imaging.ImageFormat.Jpeg);\n\n            FaceCaptured?.Invoke(filePath);\n            capturedFrame.Dispose();\n            this.Close();\n        }\n\n        private void FormClaimCamera_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            if (videoSource != null && videoSource.IsRunning)\n            {\n                videoSource.SignalToStop();\n                videoSource.WaitForStop();\n            }\n\n            lastFrame?.Dispose();\n        }\n        private void SaveFacePhoto(Bitmap faceImage, string folderPath)\n        {\n            string timestamp = DateTime.Now.ToString(\"yyyyMMdd_HHmmss\");\n            string fileName = Path.Combine(folderPath, $\"claimant_{timestamp}.jpg\");\n\n            faceImage.Save(fileName, System.Drawing.Imaging.ImageFormat.Jpeg);\n\n            // trigger event if you want gallery update\n            FaceCaptured?.Invoke(fileName);\n        }\n\n    }\n}\n","size_bytes":5888},"ReturnPoint/FormClaim.cs":{"content":"using System;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\n\nnamespace ReturnPoint\n{\n    public class FormClaim : Form\n    {\n        private TextBox nameTextBox;\n        private TextBox contactTextBox;\n        private Button saveButton;\n        private string photoPath;\n        private string saveFolder;\n        private string claimantPhotoPath;\n\n        public FormClaim(string photoFilePath, string folderPath, string facePhotoPath)\n        {\n            this.Text = \"Claim Item\";\n            this.Size = new Size(400, 300);\n            this.StartPosition = FormStartPosition.CenterParent;\n            this.FormBorderStyle = FormBorderStyle.FixedDialog;\n\n            photoPath = photoFilePath;\n            saveFolder = folderPath;\n            claimantPhotoPath = facePhotoPath;\n\n            Label nameLabel = new Label\n            {\n                Text = \"Claimant Name:\",\n                Location = new Point(20, 20),\n                AutoSize = true,\n                Font = new Font(\"Arial\", 12, FontStyle.Bold)\n            };\n            nameTextBox = new TextBox\n            {\n                Location = new Point(20, 50),\n                Width = 340,\n                Font = new Font(\"Arial\", 12)\n            };\n\n            Label contactLabel = new Label\n            {\n                Text = \"Contact Info:\",\n                Location = new Point(20, 90),\n                AutoSize = true,\n                Font = new Font(\"Arial\", 12, FontStyle.Bold)\n            };\n            contactTextBox = new TextBox\n            {\n                Location = new Point(20, 120),\n                Width = 340,\n                Font = new Font(\"Arial\", 12)\n            };\n\n            saveButton = new Button\n            {\n                Text = \"Confirm Claim\",\n                Location = new Point(20, 180),\n                Width = 150,\n                Height = 40,\n                BackColor = Color.SeaGreen,\n                ForeColor = Color.White,\n                Font = new Font(\"Arial\", 12, FontStyle.Bold)\n            };\n            saveButton.Click += SaveButton_Click;\n\n            this.Controls.Add(nameLabel);\n            this.Controls.Add(nameTextBox);\n            this.Controls.Add(contactLabel);\n            this.Controls.Add(contactTextBox);\n            this.Controls.Add(saveButton);\n        }\n\n        private void SaveButton_Click(object? sender, EventArgs e)\n        {\n            string name = nameTextBox.Text.Trim();\n            string contact = contactTextBox.Text.Trim();\n\n            if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(contact))\n            {\n                MessageBox.Show(\"Please enter both name and contact information.\", \"Warning\", MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                return;\n            }\n\n            string claimFileName = Path.GetFileNameWithoutExtension(photoPath) + \"_claimed.txt\";\n            string claimFilePath = Path.Combine(saveFolder, claimFileName);\n\n            try\n            {\n                File.WriteAllText(claimFilePath,\n                $\"Photo: {Path.GetFileName(photoPath)}\\r\\n\" +\n                $\"Claimant Name: {name}\\r\\n\" +\n                $\"Contact Info: {contact}\\r\\n\" +\n                $\"Face Photo: {Path.GetFileName(claimantPhotoPath)}\\r\\n\" +\n                $\"Claimed On: {DateTime.Now:yyyy-MM-dd HH:mm}\");\n\n                MessageBox.Show(\"Item successfully claimed!\", \"Claimed\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                this.Close();\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"Error saving claim information: {ex.Message}\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }\n    }\n}\n","size_bytes":3716},"ReturnPoint/Program.cs":{"content":"namespace ReturnPoint\n{\n    static class Program\n    {\n        [STAThread]\n        static void Main()\n        {\n            ApplicationConfiguration.Initialize();\n            Application.Run(new FormGallery());\n        }\n    }\n}\n","size_bytes":229},"ReturnPoint/obj/Release/net6.0-windows/ReturnPoint.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"ReturnPoint\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"ReturnPoint\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"ReturnPoint\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Runtime.Versioning.TargetPlatformAttribute(\"Windows7.0\")]\n[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute(\"Windows7.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1142},"ReturnPoint/obj/Debug/net6.0-windows/ReturnPoint.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.Drawing;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\nglobal using global::System.Windows.Forms;\n","size_bytes":367},"ReturnPoint/ClaimantInfoForm.cs":{"content":"using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace ReturnPoint\n{\n    public class ClaimantInfoForm : Form\n    {\n        public string ClaimantName => txtName.Text;\n        public string Contact => txtContact.Text;\n        public string Role => cmbRole.SelectedItem?.ToString();\n        public string GradeSection => txtWhere.Text;\n        public string WhenFound => txtWhen.Text;\n\n        private TextBox txtName, txtContact, txtWhere, txtWhen;\n        private ComboBox cmbRole;\n        private Label lblWhere;\n        private Button btnSubmit;\n\n        public ClaimantInfoForm()\n        {\n            this.Text = \"Claimant Info\";\n            this.StartPosition = FormStartPosition.CenterParent;\n            this.Size = new Size(400, 400);\n\n            // Name\n            Label lblName = new Label { Text = \"Name:\", Top = 20, Left = 20, Width = 120 };\n            txtName = new TextBox { Top = 20, Left = 150, Width = 200, Text = \"N/A\" };\n            txtName.GotFocus += (s, e) =>\n            {\n                if (txtName.Text == \"N/A\")\n                {\n                    txtName.Text = \"\";\n                    txtName.ForeColor = Color.Black;\n                }\n            };\n            txtName.LostFocus += (s, e) =>\n            {\n                if (string.IsNullOrWhiteSpace(txtName.Text))\n                {\n                    txtName.Text = \"N/A\";\n                    txtName.ForeColor = Color.Gray;\n                }\n            };\n\n            // Contact\n            Label lblContact = new Label { Text = \"Contact:\", Top = 60, Left = 20, Width = 120 };\n            txtContact = new TextBox { Top = 60, Left = 150, Width = 200, Text = \"09** *** ****\" };\n            {\n                if (txtContact.Text == \"09** *** ****\")\n                {\n                    txtContact.Text = \"\";\n                    txtContact.ForeColor = Color.Black;\n                }\n            };\n            txtContact.LostFocus += (s, e) =>\n            {\n                if (string.IsNullOrWhiteSpace(txtContact.Text))\n                {\n                    txtContact.Text = \"09** *** ****\";\n                    txtContact.ForeColor = Color.Gray;\n                }\n            };\n\n            // Role\n            Label lblRole = new Label { Text = \"Role:\", Top = 100, Left = 20, Width = 120 };\n            cmbRole = new ComboBox { Top = 100, Left = 150, Width = 200, DropDownStyle = ComboBoxStyle.DropDownList };\n            cmbRole.Items.AddRange(new string[] { \"Staff\", \"Teacher\", \"Student\" });\n            cmbRole.SelectedIndexChanged += CmbRole_SelectedIndexChanged;\n\n            // Grade and Section(hidden muna)\n            lblWhere = new Label { Text = \"Grade and Section:\", Top = 140, Left = 20, Width = 120, Visible = false };\n            txtWhere = new TextBox { Top = 140, Left = 150, Width = 200, Visible = false, ForeColor = Color.Gray, Text = \"N/A\" };\n            txtWhere.GotFocus += (s, e) =>\n            {\n                if (txtWhere.Text == \"N/A\")\n                {\n                    txtWhere.Text = \"\";\n                    txtWhere.ForeColor = Color.Black;\n                }\n            };\n            txtWhere.LostFocus += (s, e) =>\n            {\n                if (string.IsNullOrWhiteSpace(txtWhere.Text))\n                {\n                    txtWhere.Text = \"N/A\";\n                    txtWhere.ForeColor = Color.Gray;\n                }\n            };\n\n            // When Found\n            Label lblWhen = new Label { Text = \"When Found:\", Top = 180, Left = 20, Width = 120 };\n            txtWhen = new TextBox { Top = 180, Left = 150, Width = 200, Text = DateTime.Now.ToString(\"MM/dd/yyyy HH:mm\") };\n\n            // Submit\n            btnSubmit = new Button\n            {\n                Text = \"Submit\",\n                Top = 230,\n                Left = 150,\n                Width = 100,\n                BackColor = Color.Aqua,\n                ForeColor = Color.White\n            };\n            btnSubmit.Click += (s, e) => { this.DialogResult = DialogResult.OK; this.Close(); };\n\n            // Add controls\n            this.Controls.Add(lblName);\n            this.Controls.Add(txtName);\n            this.Controls.Add(lblContact);\n            this.Controls.Add(txtContact);\n            this.Controls.Add(lblRole);\n            this.Controls.Add(cmbRole);\n            this.Controls.Add(lblWhere);\n            this.Controls.Add(txtWhere);\n            this.Controls.Add(lblWhen);\n            this.Controls.Add(txtWhen);\n            this.Controls.Add(btnSubmit);\n        }\n\n        private void CmbRole_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (cmbRole.SelectedItem?.ToString() == \"Student\")\n            {\n                lblWhere.Visible = true;\n                txtWhere.Visible = true;\n            }\n            else\n            {\n                lblWhere.Visible = false;\n                txtWhere.Visible = false;\n            }\n        }\n    }\n}\n","size_bytes":4923},"script.js":{"content":"document.addEventListener('DOMContentLoaded', () => {\n    const loginForm = document.getElementById('loginForm');\n    const errorMessage = document.getElementById('errorMessage');\n\n    loginForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const username = document.getElementById('username').value;\n        const password = document.getElementById('password').value;\n\n        const response = await fetch('/api/login', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ username, password })\n        });\n\n        const data = await response.json();\n        if (response.ok) {\n            window.location.href = 'dashboard.html';\n            \n        } else {\n            errorMessage.textContent = data.message || 'Login failed';\n        }\n    });\n\n    \n    const registerBtn = document.querySelector('.register-btn');\n    registerBtn.addEventListener('click', () => {\n        window.location.href = 'register.html';\n    });\n});","size_bytes":1037},"ReturnPoint/FormCamera.cs":{"content":"using System;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\nusing AForge.Video;\nusing AForge.Video.DirectShow;\n\nnamespace ReturnPoint\n{\n    public class FormCamera : Form\n    {\n        private PictureBox livePreview;\n        private Label countdownLabel;\n        private VideoCaptureDevice? videoSource;\n        private FilterInfoCollection? videoDevices;\n        private Bitmap? lastFrame;\n        private string saveFolder;\n        private System.Windows.Forms.Timer? countdownTimer;\n        private int countdownValue;\n\n        public delegate void PhotoSavedHandler(string filePath);\n        public event PhotoSavedHandler? PhotoSaved;\n\n        public FormCamera(string folderPath)\n        {\n            this.Text = \"Camera\";\n            this.StartPosition = FormStartPosition.CenterScreen;\n            this.Size = new Size(800, 800);\n            this.FormBorderStyle = FormBorderStyle.FixedDialog;\n\n            saveFolder = folderPath;\n            if (!Directory.Exists(saveFolder))\n                Directory.CreateDirectory(saveFolder);\n\n            livePreview = new PictureBox\n            {\n                Dock = DockStyle.Fill,\n                SizeMode = PictureBoxSizeMode.Zoom\n            };\n\n            countdownLabel = new Label\n            {\n                AutoSize = false,\n                Dock = DockStyle.Top,\n                Height = 60,\n                TextAlign = ContentAlignment.MiddleCenter,\n                Font = new Font(\"Arial\", 28, FontStyle.Bold),\n                ForeColor = Color.Red\n            };\n\n            this.Controls.Add(livePreview);\n            this.Controls.Add(countdownLabel);\n\n            this.Load += FormCamera_Load;\n            this.FormClosing += FormCamera_FormClosing;\n        }\n\n        private void FormCamera_Load(object? sender, EventArgs e)\n        {\n            videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);\n            if (videoDevices.Count == 0)\n            {\n                MessageBox.Show(\"No camera found!\");\n                this.Close();\n                return;\n            }\n\n            videoSource = new VideoCaptureDevice(videoDevices[0].MonikerString);\n            videoSource.NewFrame += Video_NewFrame;\n            videoSource.Start();\n\n            countdownValue = 5;\n            countdownLabel.Text = countdownValue.ToString();\n\n            countdownTimer = new System.Windows.Forms.Timer();\n            countdownTimer.Interval = 1000;\n            countdownTimer.Tick += CountdownTimer_Tick;\n            countdownTimer.Start();\n        }\n\n        private void CountdownTimer_Tick(object? sender, EventArgs e)\n        {\n            countdownValue--;\n            if (countdownValue > 0)\n            {\n                countdownLabel.Text = countdownValue.ToString();\n            }\n            else\n            {\n                countdownTimer?.Stop();\n                countdownLabel.Text = \"\";\n\n                if (videoSource != null && videoSource.IsRunning)\n                {\n                    videoSource.NewFrame -= Video_NewFrame;\n                }\n\n                CapturePhoto();\n            }\n        }\n\n        private void Video_NewFrame(object? sender, NewFrameEventArgs eventArgs)\n        {\n            Bitmap frame = (Bitmap)eventArgs.Frame.Clone();\n            frame.RotateFlip(RotateFlipType.RotateNoneFlipX);\n\n            lastFrame?.Dispose();\n            lastFrame = (Bitmap)frame.Clone();\n\n            livePreview.Image?.Dispose();\n            livePreview.Image = frame;\n        }\n\n        private void CapturePhoto()\n        {\n            if (lastFrame == null) return;\n\n            Bitmap capturedFrame = (Bitmap)lastFrame.Clone();\n\n            this.Invoke((Action)(() =>\n            {\n                livePreview.Image?.Dispose();\n                livePreview.Image = (Bitmap)capturedFrame.Clone();\n\n                DialogResult result = MessageBox.Show(\"Is this photo correct?\", \"Confirm Photo\",\n                    MessageBoxButtons.YesNo, MessageBoxIcon.Question);\n\n                if (result == DialogResult.Yes)\n                {\n                    string fileName = $\"capture_{DateTime.Now:yyyyMMdd_HHmmss}.jpg\";\n                    string filePath = Path.Combine(saveFolder, fileName);\n\n                    try\n                    {\n                        SavePortraitPhoto(capturedFrame, filePath);\n                        PhotoSaved?.Invoke(filePath);\n                    }\n                    catch (Exception ex)\n                    {\n                        MessageBox.Show($\"Error saving photo: {ex.Message}\");\n                    }\n\n                    // Show input form after photo is saved\n                    using (FormInput inputForm = new FormInput(filePath, saveFolder))\n                    {\n                        inputForm.ShowDialog();\n                    }\n\n                    this.Close();\n                }\n                else\n                {\n                    if (videoSource != null && !videoSource.IsRunning)\n                    {\n                        videoSource.Start();\n                    }\n                    if (videoSource != null) videoSource.NewFrame += Video_NewFrame;\n\n                    countdownValue = 5;\n                    countdownLabel.Text = countdownValue.ToString();\n                    countdownTimer?.Start();\n                }\n            }));\n        }\n\n        private void SavePortraitPhoto(Bitmap original, string filePath)\n        {\n            int targetWidth = 1080;\n            int targetHeight = 1920;\n            double targetRatio = (double)targetWidth / targetHeight;\n            double originalRatio = (double)original.Width / original.Height;\n\n            Rectangle cropRect;\n            if (originalRatio > targetRatio)\n            {\n                int newWidth = (int)(original.Height * targetRatio);\n                int x = (original.Width - newWidth) / 2;\n                cropRect = new Rectangle(x, 0, newWidth, original.Height);\n            }\n            else\n            {\n                int newHeight = (int)(original.Width / targetRatio);\n                int y = (original.Height - newHeight) / 2;\n                cropRect = new Rectangle(0, y, original.Width, newHeight);\n            }\n\n            using (Bitmap cropped = original.Clone(cropRect, original.PixelFormat))\n            using (Bitmap resized = new Bitmap(cropped, new Size(targetWidth, targetHeight)))\n            {\n                resized.Save(filePath, System.Drawing.Imaging.ImageFormat.Jpeg);\n            }\n\n            original.Dispose();\n        }\n\n        private void FormCamera_FormClosing(object? sender, FormClosingEventArgs e)\n        {\n            if (videoSource != null && videoSource.IsRunning)\n            {\n                videoSource.SignalToStop();\n                videoSource.WaitForStop();\n            }\n\n            lastFrame?.Dispose();\n        }\n\n        // Constructor overload for default save folder\n        public FormCamera()\n        {\n            this.Text = \"Camera\";\n            this.StartPosition = FormStartPosition.CenterScreen;\n            this.Size = new Size(800, 800);\n            this.FormBorderStyle = FormBorderStyle.FixedDialog;\n\n            saveFolder = Path.Combine(Application.StartupPath, \"CapturedImages\");\n            if (!Directory.Exists(saveFolder))\n                Directory.CreateDirectory(saveFolder);\n\n            livePreview = new PictureBox\n            {\n                Dock = DockStyle.Fill,\n                SizeMode = PictureBoxSizeMode.Zoom\n            };\n\n            countdownLabel = new Label\n            {\n                AutoSize = false,\n                Dock = DockStyle.Top,\n                Height = 60,\n                TextAlign = ContentAlignment.MiddleCenter,\n                Font = new Font(\"Arial\", 28, FontStyle.Bold),\n                ForeColor = Color.Red\n            };\n\n            this.Controls.Add(livePreview);\n            this.Controls.Add(countdownLabel);\n\n            this.Load += FormCamera_Load;\n            this.FormClosing += FormCamera_FormClosing;\n        }\n    }\n}\n","size_bytes":8063}},"version":2}